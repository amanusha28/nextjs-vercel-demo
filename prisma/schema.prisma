generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model customer {
  id               String    @id(map: "customer_pk") @db.Uuid @default(uuid())
  generate_id      String?   @db.VarChar
  gender           String?   @db.VarChar(255)
  ic               String?   @unique @db.VarChar(255)
  name             String?   @db.VarChar(255)
  passport         String?   @unique @db.VarChar(255)
  race             String?   @db.VarChar(255)
  deleted_at       DateTime?
  bank_details     Json?
  customer_address Json?
  employment       Json?
  relations        Json?
  supervisor       String?   @db.Uuid
  car_plate        String?   @db.VarChar(255)
  marital_status   String?   @db.VarChar(255)
  mobile_no        String?   @db.VarChar(255)
  no_of_child      Int?
  tel_code         String?   @db.VarChar(255)
  tel_no           String?   @db.VarChar(255)
  status           String?   @db.VarChar(255)
  remarks          Json?
  created_by       String?   @db.Uuid
  document         Json?
  loan             loan[]
}

model loan {
  id                      String    @id(map: "loan_pk") @db.Uuid @default(uuid())
  customer_id             String?   @db.Uuid
  created_by              String?   @db.Uuid
  loan_remark             String?   @db.VarChar(255)
  generate_id             String    @db.VarChar
  status                  String?   @db.VarChar(255)
  agent_1                 String?   @db.Uuid
  agent_2                 String?   @db.Uuid
  created_at              DateTime  @default(now()) @db.Timestamp(6)
  unit_period             String?
  repayment_date          String?
  principal_amount        String?
  deposit_amount          String?
  application_fee         String?
  interest                String?
  date_period             String?
  repayment_term          String?
  amount_given            String?
  interest_amount         String?
  payment_per_term        String?
  deleted_at              DateTime?
  customer                customer? @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "loan_customer_fk")
  user_loan_agent_1Touser user?     @relation("loan_agent_1Touser", fields: [agent_1], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "loan_user_fk")
  user_loan_agent_2Touser user?     @relation("loan_agent_2Touser", fields: [agent_2], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "loan_user_fk_1")
  installment      installment[]
  payment          payment[]
}

model tracker {
  id         String @id(map: "tracker_pk") @db.Uuid @default(uuid())
  category   String
  year       Int
  lastNumber Int

  @@unique([category, year])
}

model user {
  id                      String    @id @db.Uuid @default(uuid())
  email                   String    @unique @db.VarChar(255)
  password                String?   @db.VarChar(255)
  created_at              DateTime  @default(now()) @db.Timestamp(6)
  role                    Role?     @default(AGENT)
  supervisor              String?   @db.Uuid
  name                    String?   @db.VarChar(255)
  generate_id             String?   @db.VarChar
  deleted_at              DateTime? @db.Timestamp(6)
  created_by              String?   @db.Uuid
  loan_loan_agent_1Touser loan[]    @relation("loan_agent_1Touser")
  loan_loan_agent_2Touser loan[]    @relation("loan_agent_2Touser")
}

model country {
  id     String  @id(map: "country_pk") @default(uuid()) @db.Uuid
  name   String  @db.VarChar(255)
  states state[]
}

model state {
  id         String  @id(map: "state_pk") @default(uuid()) @db.Uuid
  name       String  @db.VarChar(255)
  country_id String  @db.Uuid
  cities     city[]
  country    country @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "state_country_fk")
}

model city {
  id       String @id(map: "city_pk") @default(uuid()) @db.Uuid
  name     String @db.VarChar(255)
  state_id String @db.Uuid
  state    state  @relation(fields: [state_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "city_state_fk")
}

model installment {
  id               String    @id(map: "installment_pk") @default(uuid()) @db.Uuid
  generate_id      String?   @db.VarChar
  installment_date String?   @db.VarChar
  due_amount       String?   @db.VarChar
  receiving_date   String?   @db.VarChar
  status           String?   @db.VarChar
  loan_id          String?   @db.Uuid
  accepted_amount  String?   @db.VarChar
  loan             loan?     @relation(fields: [loan_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "installment_loan_fk")
  payment          payment[]
}

model payment {
  generate_id     String?   @db.VarChar
  id              String       @id(map: "payment_pk") @default(uuid()) @db.Uuid
  type            String?      @db.VarChar
  installment_id  String?      @db.Uuid
  payment_date    String?      @db.VarChar
  amount          String?      @db.VarChar
  balance         String?      @db.VarChar
  account_details String?      @db.VarChar
  loan_id         String?      @db.Uuid
  installment     installment? @relation(fields: [installment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "payment_installment_fk")
  loan            loan?        @relation(fields: [loan_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "payment_loan_fk")
}

enum Role {
  ADMIN
  LEAD
  AGENT
  SUPER_ADMIN
}
